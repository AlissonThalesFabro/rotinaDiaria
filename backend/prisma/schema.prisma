// Configura√ß√£o do Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Configura√ß√£o do Banco de Dados
// NOTA: Em produ√ß√£o, trocar para PostgreSQL
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Define no .env: DATABASE_URL="file:../data/app.db"
}


// MODELO: User (Respons√°veis/Pais)

/**
 * Tabela de usu√°rios do sistema (pais/respons√°veis)
 * Cada usu√°rio pode ter m√∫ltiplas crian√ßas cadastradas
 */
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique // Email para login
  password  String   // Senha hash (usar bcrypt)
  name      String   // Nome completo do respons√°vel
  phone     String?  // Telefone (opcional)
  
  // Relacionamentos
  children  Child[]  // Um usu√°rio pode ter v√°rias crian√ßas
  
  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users") // Nome da tabela no banco
}


// MODELO: Child (Crian√ßas)

/**
 * Tabela de crian√ßas cadastradas no sistema
 * 
 * Cada crian√ßa tem sua pr√≥pria rotina, progresso e moedas
 */
model Child {
  id          Int      @id @default(autoincrement())
  name        String   // Nome da crian√ßa
  birthDate   DateTime // Data de nascimento
  avatar      String?  // URL do avatar (opcional)
  
  // Sistema de Gamifica√ß√£o
  coins       Int      @default(0) // Total de moedas acumuladas
  streak      Int      @default(0) // Dias consecutivos cumprindo rotina
  level       Int      @default(1) // N√≠vel atual (calculado pelas moedas)
  
  // Relacionamentos
  userId      Int      // Chave estrangeira para User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  routineSlots RoutineSlot[] // Slots da rotina da crian√ßa
  progress     Progress[]    // Hist√≥rico de progresso
  achievements ChildAchievement[] // Conquistas desbloqueadas
  
  // Metadados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("children")
}


// MODELO: Activity (Atividades)

/**
 * Cat√°logo de atividades dispon√≠veis
 * 
 * Atividades pr√©-cadastradas que podem ser adicionadas √†s rotinas
 */
model Activity {
  id          Int      @id @default(autoincrement())
  name        String   // Nome da atividade (ex: "Escovar Dentes")
  description String?  // Descri√ß√£o detalhada (opcional)
  icon        String   // Emoji representando a atividade (ex: "ü¶∑")
  color       String   // Cor em hexadecimal (ex: "#3B82F6")
  category    String   // Categoria (Higiene, Alimenta√ß√£o, Educa√ß√£o, Lazer)
  
  // Sistema de Recompensas
  coins       Int      // Moedas que a crian√ßa ganha ao completar
  
  // Configura√ß√µes
  isDefault   Boolean  @default(false) // Se √© atividade padr√£o do sistema
  estimatedDuration Int? // Dura√ß√£o estimada em minutos (opcional)
  
  // Relacionamentos
  routineSlots RoutineSlot[] // Slots que usam esta atividade
  
  // Metadados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("activities")
}


// MODELO: RoutineSlot (Slots da Rotina)

/**
 * Slots individuais da rotina di√°ria
 * Cada slot representa uma atividade em um hor√°rio espec√≠fico
 * do dia de uma crian√ßa
 */
model RoutineSlot {
  id          Int      @id @default(autoincrement())
  
  // Dados do Slot
  date        DateTime // Data da rotina (YYYY-MM-DD)
  time        String   // Hor√°rio do slot (formato HH:mm, ex: "07:00")
  completed   Boolean  @default(false) // Se foi completado
  completedAt DateTime? // Quando foi completado
  
  // Relacionamentos
  childId     Int
  child       Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  activityId  Int
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  // Notas (opcional)
  notes       String?  // Observa√ß√µes dos pais/crian√ßa
  
  // Metadados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // √çndices para performance
  @@unique([childId, date, time]) // N√£o pode ter dois slots no mesmo hor√°rio
  @@index([childId, date]) // Busca r√°pida por data
  
  @@map("routine_slots")
}


// MODELO: Progress (Progresso Di√°rio)

/**
 * Registro de progresso di√°rio de cada crian√ßa
 * 
 * Armazena estat√≠sticas de cada dia para gr√°ficos e relat√≥rios
 */
model Progress {
  id              Int      @id @default(autoincrement())
  
  // Data do Progresso
  date            DateTime // Data do registro
  
  // Estat√≠sticas do Dia
  tasksTotal      Int      // Total de tarefas do dia
  tasksCompleted  Int      // Tarefas completadas
  coinsEarned     Int      @default(0) // Moedas ganhas no dia
  
  // Relacionamentos
  childId         Int
  child           Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  // Metadados
  createdAt       DateTime @default(now())
  
  // Uma entrada por crian√ßa por dia
  @@unique([childId, date])
  @@index([childId, date])
  
  @@map("progress")
}


// MODELO: Achievement (Conquistas)

/**
 * Conquistas/Medalhas dispon√≠veis no sistema
 * 
 * Define as conquistas que as crian√ßas podem desbloquear
 */
model Achievement {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Nome da conquista
  description String   // Descri√ß√£o de como conquistar
  icon        String   // Emoji da conquista (ex: "üèÜ")
  
  // Condi√ß√µes para Desbloquear
  condition   String   // Tipo: "coins", "streak", "tasks", "level"
  threshold   Int      // Valor necess√°rio (ex: 50 moedas, 7 dias)
  
  // Relacionamentos
  children    ChildAchievement[] // Crian√ßas que desbloquearam
  
  // Metadados
  createdAt   DateTime @default(now())
  
  @@map("achievements")
}


// MODELO: ChildAchievement (Conquistas da Crian√ßa)

/**
 * Tabela intermedi√°ria: Conquistas desbloqueadas por cada crian√ßa
 */
model ChildAchievement {
  id            Int         @id @default(autoincrement())
  
  // Relacionamentos
  childId       Int
  child         Child       @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  achievementId Int
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Data de Desbloqueio
  unlockedAt    DateTime    @default(now())
  
  // Uma conquista por crian√ßa
  @@unique([childId, achievementId])
  
  @@map("child_achievements")
}


// SEEDS (Dados Iniciais)

/**
 * ATIVIDADES PADR√ÉO SUGERIDAS:
 * 
 * Higiene:
 * - Escovar Dentes (ü¶∑, 5 moedas)
 * - Tomar Banho (üöø, 10 moedas)
 * - Lavar as M√£os (üßº, 3 moedas)
 * 
 * Alimenta√ß√£o:
 * - Caf√© da Manh√£ (üç≥, 10 moedas)
 * - Almo√ßo (üçΩÔ∏è, 10 moedas)
 * - Jantar (üç≤, 10 moedas)
 * - Lanche (üçé, 5 moedas)
 * 
 * Educa√ß√£o:
 * - Li√ß√£o de Casa (‚úèÔ∏è, 20 moedas)
 * - Ler Livro (üìö, 15 moedas)
 * - Estudar (üìñ, 20 moedas)
 * 
 * Lazer:
 * - Brincar (üéÆ, 10 moedas)
 * - Desenhar (üé®, 10 moedas)
 * - Assistir TV (üì∫, 5 moedas)
 * 
 * Sono:
 * - Dormir (üò¥, 10 moedas)
 * - Soneca (üí§, 5 moedas)
 * 
 * CONQUISTAS PADR√ÉO:
 * - Primeira Tarefa (üåü, 1 tarefa)
 * - Coletor (üí∞, 50 moedas)
 * - Super Coletor (üíé, 100 moedas)
 * - Dedicado (üî•, 7 dias de streak)
 * - Campe√£o (üèÜ, 30 dias de streak)
 * - Mestre da Rotina (üëë, N√≠vel 5)
 */